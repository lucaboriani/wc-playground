import { j as createVNode, s as spreadAttributes, F as Fragment } from './astro.67ba37b7.mjs';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'html-escaper';
import 'string-width';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<h2 id=\"vanilla-web-component\">Vanilla Web Component</h2>\n<p>I’m a big fan of vanilla js, everything you can do with js frameworks can, and actually <em>is accomplished</em> with it.</p>\n<p><em>Class definition</em></p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #6A737D\">// Create a class for the element</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">class</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">ExpandingList</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">extends</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">HTMLElement</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">static</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">get</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">observedAttributes</span><span style=\"color: #E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> [</span><span style=\"color: #9ECBFF\">'elements'</span><span style=\"color: #E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">constructor</span><span style=\"color: #E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">super</span><span style=\"color: #E1E4E8\">();</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">._elements </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> []</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">       </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">initList</span><span style=\"color: #E1E4E8\">(){</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">uls</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> Array.</span><span style=\"color: #B392F0\">from</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.shadowRoot.</span><span style=\"color: #B392F0\">querySelectorAll</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'ul'</span><span style=\"color: #E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">lis</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> Array.</span><span style=\"color: #B392F0\">from</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.shadowRoot.</span><span style=\"color: #B392F0\">querySelectorAll</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'li'</span><span style=\"color: #E1E4E8\">));</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      uls.</span><span style=\"color: #B392F0\">forEach</span><span style=\"color: #E1E4E8\">((</span><span style=\"color: #FFAB70\">ul</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">indx</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(indx </span><span style=\"color: #F97583\">!==</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">)ul.style.display </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'none'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      });</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      lis.</span><span style=\"color: #B392F0\">forEach</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #FFAB70\">li</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (li.</span><span style=\"color: #B392F0\">querySelectorAll</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'ul'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #79B8FF\">length</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          li.</span><span style=\"color: #B392F0\">setAttribute</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'class'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'closed'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">childText</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> li.childNodes[</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">];</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">newSpan</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> document.</span><span style=\"color: #B392F0\">createElement</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'span'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          newSpan.textContent </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> childText.textContent;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          newSpan.style.cursor </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'pointer'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          newSpan.</span><span style=\"color: #B392F0\">onclick</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">e</span><span style=\"color: #E1E4E8\">)</span><span style=\"color: #F97583\">=></span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">showul</span><span style=\"color: #E1E4E8\">(e);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          childText.parentNode.</span><span style=\"color: #B392F0\">insertBefore</span><span style=\"color: #E1E4E8\">(newSpan, childText);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">          childText.parentNode.</span><span style=\"color: #B392F0\">removeChild</span><span style=\"color: #E1E4E8\">(childText);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      });</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">connectedCallback</span><span style=\"color: #E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">attachShadow</span><span style=\"color: #E1E4E8\">({mode: </span><span style=\"color: #9ECBFF\">'open'</span><span style=\"color: #E1E4E8\">})</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        .</span><span style=\"color: #B392F0\">appendChild</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">buildStructure</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.elements)) </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">initList</span><span style=\"color: #E1E4E8\">() </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">attributeChangedCallback</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #FFAB70\">attrName</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">oldVal</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">newVal</span><span style=\"color: #E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(oldVal </span><span style=\"color: #F97583\">!==</span><span style=\"color: #E1E4E8\"> newVal) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        console.</span><span style=\"color: #B392F0\">log</span><span style=\"color: #E1E4E8\">(oldVal)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        console.</span><span style=\"color: #B392F0\">log</span><span style=\"color: #E1E4E8\">(newVal)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #6A737D\">// li click handler</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">showul</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">e</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #6A737D\">// next sibling to the span should be the ul</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">nextul</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> e.target.nextElementSibling;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #6A737D\">// Toggle visible state and update class attribute on ul</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\"> (nextul.style.display </span><span style=\"color: #F97583\">==</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'block'</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nextul.style.display </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'none'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nextul.parentNode.</span><span style=\"color: #B392F0\">setAttribute</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'class'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'closed'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      } </span><span style=\"color: #F97583\">else</span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nextul.style.display </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'block'</span><span style=\"color: #E1E4E8\">;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        nextul.parentNode.</span><span style=\"color: #B392F0\">setAttribute</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'class'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'open'</span><span style=\"color: #E1E4E8\">);</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">buildStructure</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #FFAB70\">_data</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">l</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> _data.</span><span style=\"color: #79B8FF\">length</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(l </span><span style=\"color: #F97583\">></span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">){</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">ul</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> document.</span><span style=\"color: #B392F0\">createElement</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'ul'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            </span><span style=\"color: #F97583\">for</span><span style=\"color: #E1E4E8\"> (</span><span style=\"color: #F97583\">let</span><span style=\"color: #E1E4E8\"> i</span><span style=\"color: #F97583\">=</span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">; i </span><span style=\"color: #F97583\">&#x3C;</span><span style=\"color: #E1E4E8\"> l; i</span><span style=\"color: #F97583\">++</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">current</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> _data[i]</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(current) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">li</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> document.</span><span style=\"color: #B392F0\">createElement</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'li'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                  li.textContent </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> current.title</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                  ul.</span><span style=\"color: #B392F0\">appendChild</span><span style=\"color: #E1E4E8\">(li)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                  </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(current.nodes) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">subUl</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">buildStructure</span><span style=\"color: #E1E4E8\">(current.nodes)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                    </span><span style=\"color: #F97583\">if</span><span style=\"color: #E1E4E8\">(subUl){</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                      li.</span><span style=\"color: #B392F0\">appendChild</span><span style=\"color: #E1E4E8\">(subUl)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                  }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">                }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">            </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> ul</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">null</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">get</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">elements</span><span style=\"color: #E1E4E8\">() {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">._elements</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">set</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">elements</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #FFAB70\">newVal</span><span style=\"color: #E1E4E8\">) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">._elements </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> newVal;</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      </span><span style=\"color: #79B8FF\">this</span><span style=\"color: #E1E4E8\">.</span><span style=\"color: #B392F0\">initList</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    }</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// Define the new element</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">customElements.</span><span style=\"color: #B392F0\">define</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'expanding-list'</span><span style=\"color: #E1E4E8\">, ExpandingList);</span></span></code></pre>\n<p>Usage:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { ExpandingList } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">\"../components/wc/expandingList\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">data</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> [</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        </span><span style=\"color: #6A737D\">//...</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    ]</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">\t</span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">list</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> document.</span><span style=\"color: #B392F0\">querySelector</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'expanding-list'</span><span style=\"color: #E1E4E8\">) </span><span style=\"color: #F97583\">as</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">ExpandingList</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #6A737D\">// HERE WE PASS DATA TO THE COMPONENT </span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #6A737D\">// see the class' static get observedAttributes()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    list.elements </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> data</span></span>\n<span class=\"line\"></span></code></pre>\n<p>But, as we see in the above “Expanding list” example, things can get quite complicated soon.</p>\n<p>Besides Vanilla javascript, there are options to help developers in coding web components (there are many, many, many more) such as :</p>\n<ul>\n<li>\n<p><a href=\"/lit\">Lit</a></p>\n</li>\n<li>\n<p><a href=\"https://lit.dev/\">Lit documentation</a></p>\n</li>\n<li>\n<p><a href=\"https://open-wc.org/guides/developing-components/code-examples/#lit-html-and-lit-element\">Developing Components: Lit Code Examples</a></p>\n</li>\n<li>\n<p><a href=\"https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue\">build web components with Vue</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.logrocket.com/build-web-components-svelte/\">build web components with Svelte</a></p>\n</li>\n<li>\n<p><a href=\"https://phptuts.github.io/svelte-docs/webcomponents/\">Web Components in Svelte - video + links with demo and code</a></p>\n</li>\n</ul>");

				const frontmatter = {};
				const file = "/Users/zp/Sites/DIGITIAMO/wc-playground/src/markdown/vanilla-wc.md";
				const url = undefined;
				function rawContent() {
					return "## Vanilla Web Component\n\nI'm a big fan of vanilla js, everything you can do with js frameworks can, and actually *is accomplished* with it.\n\n\n*Class definition*\n\n```js\n// Create a class for the element\nexport class ExpandingList extends HTMLElement {\n    static get observedAttributes() {\n      return ['elements'];\n    }\n    constructor() {\n      super();\n      this._elements = []\n       \n    }\n    initList(){\n      const uls = Array.from(this.shadowRoot.querySelectorAll('ul'));\n      const lis = Array.from(this.shadowRoot.querySelectorAll('li'));\n      uls.forEach((ul, indx) => {\n        if(indx !== 0)ul.style.display = 'none';\n      });\n      lis.forEach(li => {\n        \n        if (li.querySelectorAll('ul').length > 0) {\n          li.setAttribute('class', 'closed');\n          const childText = li.childNodes[0];\n          const newSpan = document.createElement('span');\n          newSpan.textContent = childText.textContent;\n          newSpan.style.cursor = 'pointer';\n\n          newSpan.onclick = (e)=>this.showul(e);\n          \n          childText.parentNode.insertBefore(newSpan, childText);\n          childText.parentNode.removeChild(childText);\n        }\n      });\n    }\n    connectedCallback() {\n      \n      this.attachShadow({mode: 'open'})\n        .appendChild(this.buildStructure(this.elements)) \n      this.initList() \n    }\n    attributeChangedCallback(attrName, oldVal, newVal){\n      if(oldVal !== newVal) {\n        console.log(oldVal)\n        console.log(newVal)\n        \n      }\n    }\n    // li click handler\n    showul (e) {\n      // next sibling to the span should be the ul\n      const nextul = e.target.nextElementSibling;\n  \n      // Toggle visible state and update class attribute on ul\n      if (nextul.style.display == 'block') {\n        nextul.style.display = 'none';\n        nextul.parentNode.setAttribute('class', 'closed');\n      } else {\n        nextul.style.display = 'block';\n        nextul.parentNode.setAttribute('class', 'open');\n      }\n    }\n    buildStructure (_data) {\n        const l = _data.length\n        if(l > 0){\n            const ul = document.createElement('ul')\n            for (let i=0; i < l; i++) {\n                const current = _data[i]\n                if(current) {\n                  const li = document.createElement('li')\n                  li.textContent = current.title\n                  ul.appendChild(li)\n                  if(current.nodes) {\n                    const subUl = this.buildStructure(current.nodes)\n                    if(subUl){\n                      li.appendChild(subUl)\n                    }\n                  }\n                }\n            }\n            return ul\n        }\n\n        return null\n    }\n    get elements() {\n      return this._elements\n    }\n    set elements(newVal) {\n      this._elements = newVal;\n      this.initList()\n    }\n}\n  \n  // Define the new element\ncustomElements.define('expanding-list', ExpandingList);\n```\n\nUsage:\n\n```js\nimport { ExpandingList } from \"../components/wc/expandingList\"\n\n    const data = [\n        //...\n    ]\n\tconst list = document.querySelector('expanding-list') as ExpandingList\n    \n\n    // HERE WE PASS DATA TO THE COMPONENT \n    // see the class' static get observedAttributes()\n    list.elements = data\n\n```\nBut, as we see in the above \"Expanding list\" example, things can get quite complicated soon. \n\nBesides Vanilla javascript, there are options to help developers in coding web components (there are many, many, many more) such as :\n\n- [Lit](/lit)\n- [Lit documentation](https://lit.dev/)\n- [Developing Components: Lit Code Examples](https://open-wc.org/guides/developing-components/code-examples/#lit-html-and-lit-element)\n- [build web components with Vue](https://vuejs.org/guide/extras/web-components.html#building-custom-elements-with-vue)\n- [build web components with Svelte](https://blog.logrocket.com/build-web-components-svelte/)\n- [Web Components in Svelte - video + links with demo and code](https://phptuts.github.io/svelte-docs/webcomponents/)\n\n\n\n\n ";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":2,"slug":"vanilla-web-component","text":"Vanilla Web Component"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
