import { h as createVNode, i as spreadAttributes, F as Fragment } from './astro.af0e87f3.mjs';
import 'html-escaper';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'string-width';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<h1 id=\"testing-react-components-with-react-testing-library\">Testing React Components with React Testing Library</h1>\n<p>see <a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React Testing Library</a></p>\n<p>repo <a href=\"https://github.com/testing-library/react-testing-library\">here</a></p>\n<p>React Testing Library builds on top of <a href=\"https://testing-library.com/\">DOM Testing Library</a> by adding APIs for working with React components.</p>\n<p>Projects created with Create React App have out of the box support for React Testing Library. If that is not the case, you can add it via npm like so:</p>\n<p><code>npm install --save-dev @testing-library/react</code></p>\n<p>or</p>\n<p><code>yarn add --dev @testing-library/react</code></p>\n<h2 id=\"a-bit-of-examples\">A bit of examples</h2>\n<p>from <a href=\"https://dev.to/sakethkowtha/testing-with-rtl-and-jest-31c9\">TDD in reactjs with React testing library (RTL) and Jest</a></p>\n<ul>\n<li>RTL is like a wrapper for DOM Testing library with reactjs support</li>\n<li>It is light weight over other react testing libraries</li>\n<li>It provides good utility functions those will help us to write tests in best practices</li>\n<li>Good querying functions.</li>\n</ul>\n<p>Some examples for using RTL</p>\n<h3 id=\"testing-basic-stateless-react-component\">Testing basic stateless react component</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { render, screen } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"@testing-library/react\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>Hello world&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> />);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getByText</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"Hello world\"</span><span style=\"color: #C9D1D9\">)).</span><span style=\"color: #D2A8FF\">toBeInTheDocument</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<p>Testing component with props</p>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { render, screen } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"@testing-library/react\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> ({ </span><span style=\"color: #FFA657\">message</span><span style=\"color: #C9D1D9\"> }) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">message</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">message</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #A5D6FF\">\"Hello world\"</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\"> />);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getByText</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"Hello world\"</span><span style=\"color: #C9D1D9\">)).</span><span style=\"color: #D2A8FF\">toBeInTheDocument</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<h3 id=\"testing-components-which-has-hooks\">Testing components which has hooks</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { render, screen } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"@testing-library/react\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">let</span><span style=\"color: #C9D1D9\"> { id } </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useParams</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">id</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>;</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  jest.</span><span style=\"color: #D2A8FF\">mock</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"react-router-dom\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">...</span><span style=\"color: #C9D1D9\">jest.</span><span style=\"color: #D2A8FF\">requireActual</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"react-router-dom\"</span><span style=\"color: #C9D1D9\">),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    useParams: jest.</span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">mockReturnValue</span><span style=\"color: #C9D1D9\">({ id: </span><span style=\"color: #A5D6FF\">\"123\"</span><span style=\"color: #C9D1D9\"> }),</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }));</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> />);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getByText</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"123\"</span><span style=\"color: #C9D1D9\">)).</span><span style=\"color: #D2A8FF\">toBeInTheDocument</span><span style=\"color: #C9D1D9\">();</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<h3 id=\"testing-components-which-has-api-call\">Testing components which has API call</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> {getArticles} </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./services'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> {render, screen} </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'@testing-library/react'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">articles</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setArticles</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">([])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">useEffect</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">response</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getArticles</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        </span><span style=\"color: #D2A8FF\">setArticles</span><span style=\"color: #C9D1D9\">(response)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }, [])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">                articles.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #FFA657\">article</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">article</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    jest.</span><span style=\"color: #D2A8FF\">mock</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'./services'</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        getArticles: jest.</span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }));</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(getArticles).</span><span style=\"color: #D2A8FF\">toBeCalled</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<h3 id=\"testing-components-which-has-api-call-and-loader\">Testing components which has API call and loader</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> {getArticles} </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'./services'</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> {render, screen} </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">'@testing-library/react'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">articles</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setArticles</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">([])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">showLoader</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setShowLoader</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">useEffect</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">setShowLoader</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">true</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">response</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">getArticles</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">setShowLoader</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">false</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      </span><span style=\"color: #D2A8FF\">setArticles</span><span style=\"color: #C9D1D9\">(response)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  }, [])</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">if</span><span style=\"color: #C9D1D9\">(showLoader) </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">Loader</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-testId</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"loader\"</span><span style=\"color: #C9D1D9\"> /></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">{</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">                articles.</span><span style=\"color: #D2A8FF\">map</span><span style=\"color: #C9D1D9\">((</span><span style=\"color: #FFA657\">article</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FFA657\">index</span><span style=\"color: #C9D1D9\">) </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">key</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">index</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">article</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">>)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">            </span><span style=\"color: #FF7B72\">}</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #FF7B72\">async</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">mockResponse</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #A5D6FF\">\"Article 1\"</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #A5D6FF\">\"Article 2\"</span><span style=\"color: #C9D1D9\">]</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    jest.</span><span style=\"color: #D2A8FF\">mock</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">'./services'</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> ({</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    getArticles: jest.</span><span style=\"color: #D2A8FF\">fn</span><span style=\"color: #C9D1D9\">().</span><span style=\"color: #D2A8FF\">mockResolveValue</span><span style=\"color: #C9D1D9\">(mockResponse)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    }));</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">loader</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">queryByTestId</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"loader\"</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(loader).</span><span style=\"color: #D2A8FF\">toBeInTheDocument</span><span style=\"color: #C9D1D9\">()</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #FF7B72\">await</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">waitForElementToBeRemoved</span><span style=\"color: #C9D1D9\">(() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> loader)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getAllByText</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"Article\"</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #79C0FF\">length</span><span style=\"color: #C9D1D9\">).</span><span style=\"color: #D2A8FF\">toBe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">2</span><span style=\"color: #C9D1D9\">)</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">})</span></span></code></pre>\n<h3 id=\"testing-user-events\">Testing user events</h3>\n<pre is:raw=\"\" class=\"astro-code\" style=\"background-color: #0d1117; overflow-x: auto;\"><code><span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> { render, screen } </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"@testing-library/react\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">import</span><span style=\"color: #C9D1D9\"> userEvent </span><span style=\"color: #FF7B72\">from</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #A5D6FF\">\"@testing-library/user-event\"</span><span style=\"color: #C9D1D9\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">MyApp</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> [</span><span style=\"color: #79C0FF\">counter</span><span style=\"color: #C9D1D9\">, </span><span style=\"color: #79C0FF\">setCounter</span><span style=\"color: #C9D1D9\">] </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">useState</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #79C0FF\">0</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">return</span><span style=\"color: #C9D1D9\"> (</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      &#x3C;</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-testId</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"inc-btn\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">onClick</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setCounter</span><span style=\"color: #C9D1D9\">(counter </span><span style=\"color: #FF7B72\">+</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        +</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      &#x3C;/</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      &#x3C;</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-testId</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"value\"</span><span style=\"color: #C9D1D9\">></span><span style=\"color: #FF7B72\">{</span><span style=\"color: #C9D1D9\">counter</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">&#x3C;/</span><span style=\"color: #7EE787\">span</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      &#x3C;</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">data-testId</span><span style=\"color: #FF7B72\">=</span><span style=\"color: #A5D6FF\">\"dec-btn\"</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">onclick</span><span style=\"color: #FF7B72\">={</span><span style=\"color: #C9D1D9\">() </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #D2A8FF\">setCounter</span><span style=\"color: #C9D1D9\">(counter </span><span style=\"color: #FF7B72\">-</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">1</span><span style=\"color: #C9D1D9\">)</span><span style=\"color: #FF7B72\">}</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">        -</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">      &#x3C;/</span><span style=\"color: #7EE787\">button</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">    &#x3C;/</span><span style=\"color: #7EE787\">div</span><span style=\"color: #C9D1D9\">></span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  );</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">};</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #D2A8FF\">test</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"MyApp should render hello world\"</span><span style=\"color: #C9D1D9\">, () </span><span style=\"color: #FF7B72\">=></span><span style=\"color: #C9D1D9\"> {</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">render</span><span style=\"color: #C9D1D9\">(&#x3C;</span><span style=\"color: #7EE787\">MyApp</span><span style=\"color: #C9D1D9\"> />);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #FF7B72\">const</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #79C0FF\">counterValue</span><span style=\"color: #C9D1D9\"> </span><span style=\"color: #FF7B72\">=</span><span style=\"color: #C9D1D9\"> screen.</span><span style=\"color: #D2A8FF\">getByTestId</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"value\"</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(counterValue).</span><span style=\"color: #D2A8FF\">toBe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"0\"</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  userEvent.</span><span style=\"color: #D2A8FF\">click</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getByTestId</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"inc-btn\"</span><span style=\"color: #C9D1D9\">));</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(counterValue).</span><span style=\"color: #D2A8FF\">toBe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"1\"</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  userEvent.</span><span style=\"color: #D2A8FF\">click</span><span style=\"color: #C9D1D9\">(screen.</span><span style=\"color: #D2A8FF\">getByTestId</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"dec-btn\"</span><span style=\"color: #C9D1D9\">));</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">  </span><span style=\"color: #D2A8FF\">expect</span><span style=\"color: #C9D1D9\">(counterValue).</span><span style=\"color: #D2A8FF\">toBe</span><span style=\"color: #C9D1D9\">(</span><span style=\"color: #A5D6FF\">\"0\"</span><span style=\"color: #C9D1D9\">);</span></span>\n<span class=\"line\"><span style=\"color: #C9D1D9\">});</span></span></code></pre>\n<h3 id=\"testing-custom-hooks\">Testing custom hooks</h3>\n<p>@todo</p>\n<p>4 now Take a look at <a href=\"https://kentcdodds.com/blog/how-to-test-custom-react-hooks\">How to test custom React hooks</a> by Kent C. Dodds as it’s a pretty complex issue and the article’s great!</p>\n<h3 id=\"testing-redux\">Testing Redux</h3>\n<p>@todo</p>\n<h3 id=\"testing-contexts\">Testing Contexts</h3>\n<p>@todo</p>");

				const frontmatter = {};
				const file = "/Users/zp/Sites/DIGITIAMO/wc-playground/src/markdown/testing/testing-react-components-react-testing-library.md";
				const url = undefined;
				function rawContent() {
					return "# Testing React Components with React Testing Library\n\nsee [React Testing Library](https://testing-library.com/docs/react-testing-library/intro/)\n\nrepo [here](https://github.com/testing-library/react-testing-library)\n\nReact Testing Library builds on top of [DOM Testing Library](https://testing-library.com/) by adding APIs for working with React components.\n\nProjects created with Create React App have out of the box support for React Testing Library. If that is not the case, you can add it via npm like so:\n\n`npm install --save-dev @testing-library/react`\n\nor \n\n`yarn add --dev @testing-library/react`\n\n## A bit of examples \n\nfrom [TDD in reactjs with React testing library (RTL) and Jest](https://dev.to/sakethkowtha/testing-with-rtl-and-jest-31c9)\n\n- RTL is like a wrapper for DOM Testing library with reactjs support\n- It is light weight over other react testing libraries\n- It provides good utility functions those will help us to write tests in best practices\n- Good querying functions.\n\nSome examples for using RTL\n\n### Testing basic stateless react component\n\n```js\nimport { render, screen } from \"@testing-library/react\";\n\nconst MyApp = () => {\n  return <div>Hello world</div>;\n};\n\ntest(\"MyApp should render hello world\", () => {\n  render(<MyApp />);\n  expect(screen.getByText(\"Hello world\")).toBeInTheDocument();\n});\n```\n\nTesting component with props\n\n```js\nimport { render, screen } from \"@testing-library/react\";\n\nconst MyApp = ({ message }) => {\n  return <div>{message}</div>;\n};\n\ntest(\"MyApp should render hello world\", () => {\n  render(<MyApp message={\"Hello world\"} />);\n  expect(screen.getByText(\"Hello world\")).toBeInTheDocument();\n});\n```\n\n### Testing components which has hooks\n\n```js\nimport { render, screen } from \"@testing-library/react\";\n\nconst MyApp = () => {\n  let { id } = useParams();\n  return <div>{id}</div>;\n};\n\ntest(\"MyApp should render hello world\", () => {\n  jest.mock(\"react-router-dom\", () => ({\n    ...jest.requireActual(\"react-router-dom\"),\n    useParams: jest.fn().mockReturnValue({ id: \"123\" }),\n  }));\n  render(<MyApp />);\n  expect(screen.getByText(\"123\")).toBeInTheDocument();\n});\n```\n\n\n### Testing components which has API call\n\n```js\nimport {getArticles} from './services'\nimport {render, screen} from '@testing-library/react'\n\nconst MyApp = () => {\n    const [articles, setArticles] = useState([])\n    useEffect(() => {\n        const response = await getArticles()\n        setArticles(response)\n    }, [])\n    return <div>\n            {\n                articles.map(article => <div>{article}</div>)\n            }\n        </div>\n}\n\ntest(\"MyApp should render hello world\", () => {\n    jest.mock('./services', () => ({\n        getArticles: jest.fn()\n    }));\n    render(<MyApp />)\n    expect(getArticles).toBeCalled()\n})\n```\n### Testing components which has API call and loader\n\n```js\nimport {getArticles} from './services'\nimport {render, screen} from '@testing-library/react'\n\nconst MyApp = () => {\n    const [articles, setArticles] = useState([])\n    const [showLoader, setShowLoader] = useState(false)\n\n  useEffect(() => {\n      setShowLoader(true)\n      const response = await getArticles()\n      setShowLoader(false)\n      setArticles(response)\n  }, [])\n    if(showLoader) return <Loader data-testId=\"loader\" />\n    return <div>\n            {\n                articles.map((article, index) => <div key={index}>{article}</div>)\n            }\n        </div>\n}\n\ntest(\"MyApp should render hello world\", async () => {\n    const mockResponse = [\"Article 1\", \"Article 2\"]\n    jest.mock('./services', () => ({\n    getArticles: jest.fn().mockResolveValue(mockResponse)\n    }));\n    render(<MyApp />)\n    const loader = screen.queryByTestId(\"loader\")\n  expect(loader).toBeInTheDocument()\n    await waitForElementToBeRemoved(() => loader)\n    expect(screen.getAllByText(\"Article\").length).toBe(2)\n})\n```\n\n### Testing user events\n\n```js\nimport { render, screen } from \"@testing-library/react\";\nimport userEvent from \"@testing-library/user-event\";\n\nconst MyApp = () => {\n  const [counter, setCounter] = useState(0);\n  return (\n    <div>\n      <button data-testId=\"inc-btn\" onClick={() => setCounter(counter + 1)}>\n        +\n      </button>\n      <span data-testId=\"value\">{counter}</span>\n      <button data-testId=\"dec-btn\" onclick={() => setCounter(counter - 1)}>\n        -\n      </button>\n    </div>\n  );\n};\n\ntest(\"MyApp should render hello world\", () => {\n  render(<MyApp />);\n  const counterValue = screen.getByTestId(\"value\");\n  expect(counterValue).toBe(\"0\");\n  userEvent.click(screen.getByTestId(\"inc-btn\"));\n  expect(counterValue).toBe(\"1\");\n  userEvent.click(screen.getByTestId(\"dec-btn\"));\n  expect(counterValue).toBe(\"0\");\n});\n```\n\n### Testing custom hooks\n\n@todo\n\n4 now Take a look at [How to test custom React hooks](https://kentcdodds.com/blog/how-to-test-custom-react-hooks) by Kent C. Dodds as it's a pretty complex issue and the article's great!\n\n\n### Testing Redux\n\n@todo\n\n### Testing Contexts\n\n@todo\n\n";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"testing-react-components-with-react-testing-library","text":"Testing React Components with React Testing Library"},{"depth":2,"slug":"a-bit-of-examples","text":"A bit of examples"},{"depth":3,"slug":"testing-basic-stateless-react-component","text":"Testing basic stateless react component"},{"depth":3,"slug":"testing-components-which-has-hooks","text":"Testing components which has hooks"},{"depth":3,"slug":"testing-components-which-has-api-call","text":"Testing components which has API call"},{"depth":3,"slug":"testing-components-which-has-api-call-and-loader","text":"Testing components which has API call and loader"},{"depth":3,"slug":"testing-user-events","text":"Testing user events"},{"depth":3,"slug":"testing-custom-hooks","text":"Testing custom hooks"},{"depth":3,"slug":"testing-redux","text":"Testing Redux"},{"depth":3,"slug":"testing-contexts","text":"Testing Contexts"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
