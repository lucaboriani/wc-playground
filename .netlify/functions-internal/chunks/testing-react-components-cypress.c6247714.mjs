import { j as createVNode, s as spreadAttributes, F as Fragment } from './astro.67ba37b7.mjs';
import 'cookie';
import 'kleur/colors';
import 'slash';
import 'path-to-regexp';
import 'mime';
import 'html-escaper';
import 'string-width';

const images = {
					
				};

				function updateImageReferences(html) {
					return html.replaceAll(
						/__ASTRO_IMAGE_="(.+)"/gm,
						(full, imagePath) => spreadAttributes({src: images[imagePath].src, ...images[imagePath].attributes})
					);
				}

				const html = updateImageReferences("<h1 id=\"react-component-testing-with-cypress\">React Component Testing with Cypress</h1>\n<p>see also <a href=\"https://docs.cypress.io/guides/component-testing/react/quickstart#Getting-Started\">Getting started</a> and <a href=\"https://docs.cypress.io/guides/component-testing/react/overview#Framework-Support\">Framework Support</a></p>\n<p>Cypress Component Testing currently supports React 16+ with the following frameworks:</p>\n<ul>\n<li>Create React App</li>\n<li>Next.js</li>\n<li>React with Vite</li>\n<li>React with Webpack</li>\n</ul>\n<p>To get up and running with Cypress Component Testing in React, install Cypress into your project:</p>\n<p><code>npm i cypress -D</code></p>\n<p>Open Cypress:</p>\n<p><code>npx cypress open</code></p>\n<p>The Cypress Launchpad will guide you through configuring your project.</p>\n<h3 id=\"creating-and-testing-a-component\">Creating and testing a Component</h3>\n<p>Example component:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { useState } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'react'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #F97583\">export</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">default</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">function</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">Stepper</span><span style=\"color: #E1E4E8\">({ </span><span style=\"color: #FFAB70\">initial</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">0</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">onChange</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {} }) {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> [</span><span style=\"color: #79B8FF\">count</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">setCount</span><span style=\"color: #E1E4E8\">] </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">useState</span><span style=\"color: #E1E4E8\">(initial)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">handleIncrement</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">newCount</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> count </span><span style=\"color: #F97583\">+</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">setCount</span><span style=\"color: #E1E4E8\">(newCount)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">onChange</span><span style=\"color: #E1E4E8\">(newCount)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">handleDecrement</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">newCount</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> count </span><span style=\"color: #F97583\">-</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">1</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">setCount</span><span style=\"color: #E1E4E8\">(newCount)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #B392F0\">onChange</span><span style=\"color: #E1E4E8\">(newCount)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> (</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">button</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">data-cy</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"decrement\"</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">onClick</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{handleDecrement}></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        -</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;/</span><span style=\"color: #85E89D\">button</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">span</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">data-cy</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"counter\"</span><span style=\"color: #E1E4E8\">>{count}&#x3C;/</span><span style=\"color: #85E89D\">span</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;</span><span style=\"color: #85E89D\">button</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">data-cy</span><span style=\"color: #F97583\">=</span><span style=\"color: #9ECBFF\">\"increment\"</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">onClick</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{handleIncrement}></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">        +</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      &#x3C;/</span><span style=\"color: #85E89D\">button</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    &#x3C;/</span><span style=\"color: #85E89D\">div</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  )</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">}</span></span></code></pre>\n<p>mounting the component:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> Stepper </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'./Stepper'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">describe</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'&#x3C;Stepper>'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'mounts'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<h4 id=\"example-test-for-the-stepper-component\">Example test for the Stepper component</h4>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #B392F0\">describe</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'&#x3C;Stepper>'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'stepper should default to 0'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=counter]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.text'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'0'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'supports an \"initial\" prop to set the value'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">initial</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{</span><span style=\"color: #79B8FF\">100</span><span style=\"color: #E1E4E8\">} />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=counter]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.text'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'100'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'when the increment button is pressed, the counter is incremented'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=increment]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">click</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=counter]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.text'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'1'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'when the decrement button is pressed, the counter is decremented'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=decrement]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">click</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=counter]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.text'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'-1'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'clicking + fires a change event with the incremented value'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">onChangeSpy</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> cy.</span><span style=\"color: #B392F0\">spy</span><span style=\"color: #E1E4E8\">().</span><span style=\"color: #B392F0\">as</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'onChangeSpy'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Stepper</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">onChange</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{onChangeSpy} />)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'[data-cy=increment]'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">click</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'@onChangeSpy'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.been.calledWith'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #79B8FF\">1</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<h3 id=\"custom-mount-commands\">Custom Mount Commands</h3>\n<p>By default, cy.mount() is a simple passthrough to mount(), however, you can customize cy.mount() to fit your needs. For instance, if you are using providers or other global app-level setups in your React app, you can configure them here.</p>\n<h4 id=\"react-router\">React Router</h4>\n<p>If you have a component that consumes a hook or component from React Router, make sure the component has access to a React Router provider. Below is a sample mount command that uses MemoryRouter to wrap the component.</p>\n<p>in cypress/support/component.js:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { mount } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'cypress/react'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { MemoryRouter } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'react-router-dom'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">Cypress.Commands.</span><span style=\"color: #B392F0\">add</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'mount'</span><span style=\"color: #E1E4E8\">, (</span><span style=\"color: #FFAB70\">component</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">options</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> {}) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #79B8FF\">routerProps</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> { initialEntries: [</span><span style=\"color: #9ECBFF\">'/'</span><span style=\"color: #E1E4E8\">] }, </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">mountOptions</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> options</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">wrapped</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #79B8FF\">MemoryRouter</span><span style=\"color: #E1E4E8\"> {</span><span style=\"color: #F97583\">...</span><span style=\"color: #E1E4E8\">routerProps}>{component}&#x3C;/</span><span style=\"color: #79B8FF\">MemoryRouter</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(wrapped, mountOptions)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<p>To set up certain scenarios, pass in props that will get passed to MemoryRouter in the options. Below is an example test that ensures an active link has the correct class applied to it by initializing the router with initialEntries pointed to a particular route:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { Navigation } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'./Navigation'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'home link should be active when url is \"/\"'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// No need to pass in custom initialEntries as default url is '/'</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Navigation</span><span style=\"color: #E1E4E8\"> />)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'a'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">contains</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'Home'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.class'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'active'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'login link should be active when url is \"/login\"'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">Navigation</span><span style=\"color: #E1E4E8\"> />, {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    routerProps: {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">      initialEntries: [</span><span style=\"color: #9ECBFF\">'/login'</span><span style=\"color: #E1E4E8\">],</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">    },</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'a'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">contains</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'Login'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.class'</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #9ECBFF\">'active'</span><span style=\"color: #E1E4E8\">)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<h4 id=\"redux\">Redux</h4>\n<p>To use a component that consumes state or actions from a Redux store, create a mount command that will wrap your component in a Redux Provider:</p>\n<p>in cypress/support/component.js:</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { mount } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'cypress/react'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { Provider } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'react-redux'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { getStore } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'../../src/store'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">Cypress.Commands.</span><span style=\"color: #B392F0\">add</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'mount'</span><span style=\"color: #E1E4E8\">, (</span><span style=\"color: #FFAB70\">component</span><span style=\"color: #E1E4E8\">, </span><span style=\"color: #FFAB70\">options</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> {}) </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// Use the default store if one is not provided</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> { </span><span style=\"color: #79B8FF\">reduxStore</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getStore</span><span style=\"color: #E1E4E8\">(), </span><span style=\"color: #F97583\">...</span><span style=\"color: #79B8FF\">mountOptions</span><span style=\"color: #E1E4E8\"> } </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> options</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">wrapped</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> &#x3C;</span><span style=\"color: #79B8FF\">Provider</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">store</span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\">{reduxStore}>{component}&#x3C;/</span><span style=\"color: #79B8FF\">Provider</span><span style=\"color: #E1E4E8\">></span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">return</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(wrapped, mountOptions)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<p>The options param can have a store that is already initialized with data (note that the <code>getStore</code> method is a factory method that <strong>initializes a new Redux store</strong>.\nIt is <em>important</em> that the store be initialized <strong>with each new test</strong> to ensure changes to the store don’t affect other tests.):</p>\n<pre is:raw=\"\" class=\"astro-code github-dark\" style=\"background-color: #24292e; overflow-x: auto;\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { getStore } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'../redux/store'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { setUser } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'../redux/userSlice'</span></span>\n<span class=\"line\"><span style=\"color: #F97583\">import</span><span style=\"color: #E1E4E8\"> { UserProfile } </span><span style=\"color: #F97583\">from</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #9ECBFF\">'./UserProfile'</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #B392F0\">it</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'User profile should display user name'</span><span style=\"color: #E1E4E8\">, () </span><span style=\"color: #F97583\">=></span><span style=\"color: #E1E4E8\"> {</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">user</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> { name: </span><span style=\"color: #9ECBFF\">'test person'</span><span style=\"color: #E1E4E8\"> }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// getStore is a factory method that creates a new store</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #F97583\">const</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #79B8FF\">store</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #F97583\">=</span><span style=\"color: #E1E4E8\"> </span><span style=\"color: #B392F0\">getStore</span><span style=\"color: #E1E4E8\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  </span><span style=\"color: #6A737D\">// setUser is an action exported from the user slice</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  store.</span><span style=\"color: #B392F0\">dispatch</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #B392F0\">setUser</span><span style=\"color: #E1E4E8\">(user))</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">mount</span><span style=\"color: #E1E4E8\">(&#x3C;</span><span style=\"color: #79B8FF\">UserProfile</span><span style=\"color: #E1E4E8\"> />, { reduxStore: store })</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">  cy.</span><span style=\"color: #B392F0\">get</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'div.name'</span><span style=\"color: #E1E4E8\">).</span><span style=\"color: #B392F0\">should</span><span style=\"color: #E1E4E8\">(</span><span style=\"color: #9ECBFF\">'have.text'</span><span style=\"color: #E1E4E8\">, user.name)</span></span>\n<span class=\"line\"><span style=\"color: #E1E4E8\">})</span></span></code></pre>\n<h4 id=\"cypress-react-api\">Cypress React API</h4>\n<p>see <a href=\"https://docs.cypress.io/guides/component-testing/react/api#Methods\">https://docs.cypress.io/guides/component-testing/react/api#Methods</a></p>");

				const frontmatter = {};
				const file = "/Users/zp/Sites/DIGITIAMO/wc-playground/src/markdown/testing/testing-react-components-cypress.md";
				const url = undefined;
				function rawContent() {
					return "# React Component Testing with Cypress\n\nsee also [Getting started](https://docs.cypress.io/guides/component-testing/react/quickstart#Getting-Started) and [Framework Support](https://docs.cypress.io/guides/component-testing/react/overview#Framework-Support)\n\nCypress Component Testing currently supports React 16+ with the following frameworks:\n\n- Create React App\n- Next.js\n- React with Vite\n- React with Webpack\n\nTo get up and running with Cypress Component Testing in React, install Cypress into your project:\n\n`npm i cypress -D`\n\nOpen Cypress:\n\n`npx cypress open`\n\nThe Cypress Launchpad will guide you through configuring your project.\n\n### Creating and testing a Component\n\nExample component: \n```js\n\nimport { useState } from 'react'\n\nexport default function Stepper({ initial = 0, onChange = () => {} }) {\n  const [count, setCount] = useState(initial)\n\n  const handleIncrement = () => {\n    const newCount = count + 1\n    setCount(newCount)\n    onChange(newCount)\n  }\n\n  const handleDecrement = () => {\n    const newCount = count - 1\n    setCount(newCount)\n    onChange(newCount)\n  }\n\n  return (\n    <div>\n      <button data-cy=\"decrement\" onClick={handleDecrement}>\n        -\n      </button>\n      <span data-cy=\"counter\">{count}</span>\n      <button data-cy=\"increment\" onClick={handleIncrement}>\n        +\n      </button>\n    </div>\n  )\n}\n```\nmounting the component:\n\n```js\nimport Stepper from './Stepper'\n\ndescribe('<Stepper>', () => {\n  it('mounts', () => {\n    cy.mount(<Stepper />)\n  })\n})\n```\n\n\n#### Example test for the Stepper component\n\n```js\ndescribe('<Stepper>', () => {\n  it('stepper should default to 0', () => {\n    cy.mount(<Stepper />)\n    cy.get('[data-cy=counter]').should('have.text', '0')\n  })\n  it('supports an \"initial\" prop to set the value', () => {\n    cy.mount(<Stepper initial={100} />)\n    cy.get('[data-cy=counter]').should('have.text', '100')\n  })\n  it('when the increment button is pressed, the counter is incremented', () => {\n    cy.mount(<Stepper />)\n    cy.get('[data-cy=increment]').click()\n    cy.get('[data-cy=counter]').should('have.text', '1')\n  })\n\n  it('when the decrement button is pressed, the counter is decremented', () => {\n    cy.mount(<Stepper />)\n    cy.get('[data-cy=decrement]').click()\n    cy.get('[data-cy=counter]').should('have.text', '-1')\n  })\n  it('clicking + fires a change event with the incremented value', () => {\n    const onChangeSpy = cy.spy().as('onChangeSpy')\n    cy.mount(<Stepper onChange={onChangeSpy} />)\n    cy.get('[data-cy=increment]').click()\n    cy.get('@onChangeSpy').should('have.been.calledWith', 1)\n  })\n})\n```\n\n### Custom Mount Commands\n\nBy default, cy.mount() is a simple passthrough to mount(), however, you can customize cy.mount() to fit your needs. For instance, if you are using providers or other global app-level setups in your React app, you can configure them here.\n\n#### React Router\n\nIf you have a component that consumes a hook or component from React Router, make sure the component has access to a React Router provider. Below is a sample mount command that uses MemoryRouter to wrap the component.\n\nin cypress/support/component.js:\n\n```js\nimport { mount } from 'cypress/react'\nimport { MemoryRouter } from 'react-router-dom'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  const { routerProps = { initialEntries: ['/'] }, ...mountOptions } = options\n\n  const wrapped = <MemoryRouter {...routerProps}>{component}</MemoryRouter>\n\n  return mount(wrapped, mountOptions)\n})\n```\n\nTo set up certain scenarios, pass in props that will get passed to MemoryRouter in the options. Below is an example test that ensures an active link has the correct class applied to it by initializing the router with initialEntries pointed to a particular route:\n\n```js\nimport { Navigation } from './Navigation'\n\nit('home link should be active when url is \"/\"', () => {\n  // No need to pass in custom initialEntries as default url is '/'\n  cy.mount(<Navigation />)\n\n  cy.get('a').contains('Home').should('have.class', 'active')\n})\n\nit('login link should be active when url is \"/login\"', () => {\n  cy.mount(<Navigation />, {\n    routerProps: {\n      initialEntries: ['/login'],\n    },\n  })\n\n  cy.get('a').contains('Login').should('have.class', 'active')\n})\n```\n\n\n#### Redux\n\nTo use a component that consumes state or actions from a Redux store, create a mount command that will wrap your component in a Redux Provider:\n\nin cypress/support/component.js:\n\n```js\nimport { mount } from 'cypress/react'\nimport { Provider } from 'react-redux'\nimport { getStore } from '../../src/store'\n\nCypress.Commands.add('mount', (component, options = {}) => {\n  // Use the default store if one is not provided\n  const { reduxStore = getStore(), ...mountOptions } = options\n\n  const wrapped = <Provider store={reduxStore}>{component}</Provider>\n\n  return mount(wrapped, mountOptions)\n})\n```\n\nThe options param can have a store that is already initialized with data (note that the `getStore` method is a factory method that **initializes a new Redux store**. \nIt is *important* that the store be initialized **with each new test** to ensure changes to the store don't affect other tests.):\n\n```js\nimport { getStore } from '../redux/store'\nimport { setUser } from '../redux/userSlice'\nimport { UserProfile } from './UserProfile'\n\nit('User profile should display user name', () => {\n  const user = { name: 'test person' }\n\n  // getStore is a factory method that creates a new store\n  const store = getStore()\n\n  // setUser is an action exported from the user slice\n  store.dispatch(setUser(user))\n\n  cy.mount(<UserProfile />, { reduxStore: store })\n\n  cy.get('div.name').should('have.text', user.name)\n})\n```\n\n#### Cypress React API\n\nsee [https://docs.cypress.io/guides/component-testing/react/api#Methods](https://docs.cypress.io/guides/component-testing/react/api#Methods)";
				}
				function compiledContent() {
					return html;
				}
				function getHeadings() {
					return [{"depth":1,"slug":"react-component-testing-with-cypress","text":"React Component Testing with Cypress"},{"depth":3,"slug":"creating-and-testing-a-component","text":"Creating and testing a Component"},{"depth":4,"slug":"example-test-for-the-stepper-component","text":"Example test for the Stepper component"},{"depth":3,"slug":"custom-mount-commands","text":"Custom Mount Commands"},{"depth":4,"slug":"react-router","text":"React Router"},{"depth":4,"slug":"redux","text":"Redux"},{"depth":4,"slug":"cypress-react-api","text":"Cypress React API"}];
				}
				async function Content() {
					const { layout, ...content } = frontmatter;
					content.file = file;
					content.url = url;
					const contentFragment = createVNode(Fragment, { 'set:html': html });
					return contentFragment;
				}
				Content[Symbol.for('astro.needsHeadRendering')] = true;

export { Content, compiledContent, Content as default, file, frontmatter, getHeadings, images, rawContent, url };
